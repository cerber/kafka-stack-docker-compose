version: '3.3'

services:

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - ./es-full-stack/grafana/data:/var/lib/grafana
    ports:
      - 3000:3000
    environment:
      GF_SERVER_ROOT_URL: "http://grafana"
      GF_SECURITY_ADMIN_PASSWORD: "secret"
      # GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel,snuids-trafficlights-panel,jdbranham-diagram-panel,fatcloud-windrose-panel"
      # GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel,snuids-trafficlights-panel,jdbranham-diagram-panel"
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel,jdbranham-diagram-panel"
    depends_on:
      - kafka1
      - elasticsearch
    networks:
      - stack
    user: "0"
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.3.2
    container_name: elasticsearch
    volumes:
      # - es-data:/usr/share/elasticsearch/data
      - ./es-full-stack/elasticsearch/data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
      TAKE_FILE_OWNERSHIP: "true"
    networks:
      - stack  

  kibana:
    image: docker.elastic.co/kibana/kibana-oss:6.3.2
    container_name: kibana
    volumes:
      - ./config/kibana:/usr/share/kibana/config:ro
    ports:
      - "5601:5601"
    environment:
      - "ELASTICSEARCH_URL=http://elasticsearch:9200"
    networks:
      - stack
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash-oss:6.3.2
    container_name: logstash
    volumes:
      - ./config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - stack
    depends_on:
      - elasticsearch

  zoo1:
    image: zookeeper:3.4.12
    container_name: zoo1
    restart: unless-stopped
    hostname: zoo1
    ports:
      - "2181:2181"
    environment:
        ZOO_MY_ID: 1
        ZOO_PORT: 2181
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ./es-full-stack/zoo1/data:/data
      - ./es-full-stack/zoo1/datalog:/datalog
      # - zoo1-data:/data
      # - zoo1-datalog:/datalog
    networks:
      - stack
    healthcheck:
      test: echo stat | nc zoo1 2181
      interval: 10s
      timeout: 10s
      retries: 3

  zoo2:
    image: zookeeper:3.4.12
    container_name: zoo2
    restart: unless-stopped
    hostname: zoo2
    ports:
      - "2182:2182"
    environment:
        ZOO_MY_ID: 2
        ZOO_PORT: 2182
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ./es-full-stack/zoo2/data:/data
      - ./es-full-stack/zoo2/datalog:/datalog
      # - zoo2-data:/data
      # - zoo2-datalog:/datalog
    networks:
      - stack
    healthcheck:
      test: echo stat | nc zoo2 2182
      interval: 10s
      timeout: 10s
      retries: 3

  zoo3:
    image: zookeeper:3.4.12
    container_name: zoo3
    restart: unless-stopped
    hostname: zoo3
    ports:
      - "2183:2183"
    environment:
        ZOO_MY_ID: 3
        ZOO_PORT: 2183
        ZOO_SERVERS: server.1=zoo1:2888:3888 server.2=zoo2:2888:3888 server.3=zoo3:2888:3888
    volumes:
      - ./es-full-stack/zoo3/data:/data
      - ./es-full-stack/zoo3/datalog:/datalog
      # - zoo3-data:/data
      # - zoo3-datalog:/datalog
    networks:
      - stack
    healthcheck:
      test: echo stat | nc zoo3 2183
      interval: 10s
      timeout: 10s
      retries: 3

  kafka1:
    image: confluentinc/cp-kafka:4.0.1
    container_name: kafka1
    hostname: kafka1
    ports:
      - "9092:9092"
    environment:
      # add the entry "127.0.0.1    kafka1" to your /etc/hosts file
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka1:9092"
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181,zoo2:2182,zoo3:2183"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - ./es-full-stack/kafka1/data:/var/lib/kafka/data
      # - kafka1-data:/var/lib/kafka/data
    networks:
      - stack
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    healthcheck:
      test: ps augwwx | egrep [S]upportedKafka
    
  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:4.0.1
    container_name: kafka-schema-registry
    hostname: kafka-schema-registry
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zoo1:2181,zoo2:2182,zoo3:2183
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - stack
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - kafka1

  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    container_name: kafka-schema-registry-ui
    hostname: kafka-schema-registry-ui
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://kafka-schema-registry:8081/
      PROXY: "true"
    networks:
      - stack
    depends_on:
      - kafka-schema-registry

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:4.0.1
    container_name: kafka-rest-proxy
    hostname: kafka-rest-proxy
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zoo1:2181,zoo2:2182,zoo3:2183
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka1:9092
    networks:
      - stack
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - kafka1
      - kafka-schema-registry

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:latest
    container_name: kafka-topics-ui
    hostname: kafka-topics-ui
    ports:
      - "8000:8000"
    environment:
      KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
      PROXY: "true"
    networks:
      - stack
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - kafka1
      - kafka-schema-registry
      - kafka-rest-proxy

  kafka-connect:
    image: confluentinc/cp-kafka-connect:4.0.1
    container_name: kafka-connect
    hostname: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:9092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: /usr/share/java
    networks:
      - stack
    depends_on:
      - zoo1
      - zoo2
      - zoo3
      - kafka1
      - kafka-schema-registry
      - kafka-rest-proxy
      - elasticsearch

  kafka-connect-ui:
    image: landoop/kafka-connect-ui:latest
    container_name: kafka-connect-ui
    hostname: kafka-connect-ui
    ports:
      - "8003:8000"
    environment:
      CONNECT_URL: "http://kafka-connect:8083/"
      PROXY: "true"
    networks:
      - stack
    depends_on:
      - kafka-connect

  zoonavigator-web:
    image: elkozmon/zoonavigator-web:latest
    container_name: zoonavigator-web
    ports:
     - "8004:8000"
    environment:
      API_HOST: "zoonavigator-api"
      API_PORT: 9000
    links:
     - zoonavigator-api
    networks:
      - stack
    depends_on:
     - zoonavigator-api
    restart: unless-stopped

  zoonavigator-api:
    image: elkozmon/zoonavigator-api:latest
    container_name: zoonavigator-api
    environment:
      API_HTTP_PORT: 9000
    networks:
      - stack
    depends_on:
      - zoo1
      - zoo2
      - zoo3
    restart: unless-stopped

# volumes:
#   es-data:
#     driver: local
#   zoo1-data:
#     driver: local
#   zoo1-datalog:
#     driver: local
#   kafka1-data:
#     driver: local

networks:
  stack:
    driver: bridge

